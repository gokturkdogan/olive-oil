generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password_hash String?
  role          Role      @default(CUSTOMER)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now()) @updatedAt
  loyalty_tier  String    @default("STANDARD")
  total_spent   Int       @default(0)
  addresses     Address[]
  carts         Cart[]
  orders        Order[]

  @@map("users")
}

model Address {
  id            String   @id @default(uuid())
  user_id       String
  title         String
  name          String
  phone         String
  address_line1 String
  address_line2 String?
  city          String
  district      String
  postal_code   String
  country       String   @default("TR")
  is_default    Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Product {
  id            String      @id @default(uuid())
  slug          String      @unique
  title         String
  description   String
  images        Json
  price         Int
  active        Boolean     @default(true)
  stock         Int         @default(0)
  is_main_page  Boolean     @default(false)
  is_recommended Boolean    @default(false)
  category_id   String?
  subcategory_id String?
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  cart_items    CartItem[]
  order_items   OrderItem[]
  category      Category?    @relation(fields: [category_id], references: [id])
  subcategory   SubCategory? @relation(fields: [subcategory_id], references: [id])

  @@map("products")
}

model Coupon {
  id               String     @id @default(uuid())
  code             String     @unique
  type             CouponType
  value            Int
  usage_limit      Int?
  used_count       Int        @default(0)
  min_order_amount Int?
  starts_at        DateTime
  ends_at          DateTime
  active           Boolean    @default(true)
  created_at       DateTime   @default(now())

  @@map("coupons")
}

model Cart {
  id         String     @id @default(uuid())
  user_id    String?
  guest_id   String?
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  items      CartItem[]
  user       User?      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("carts")
}

model CartItem {
  id         String  @id @default(uuid())
  cart_id    String
  product_id String
  quantity   Int     @default(1)
  cart       Cart    @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product    Product @relation(fields: [product_id], references: [id])

  @@unique([cart_id, product_id])
  @@map("cart_items")
}

model Order {
  id                      String          @id @default(uuid())
  user_id                 String?
  email                   String
  shipping_name           String
  shipping_phone          String
  shipping_address_line1  String
  shipping_address_line2  String?
  city                    String
  district                String
  postal_code             String
  country                 String          @default("TR")
  subtotal                Int
  discount_total          Int             @default(0)
  shipping_fee            Int             @default(0)
  total                   Int
  coupon_code             String?
  status                  OrderStatus     @default(PENDING)
  payment_status          PaymentStatus   @default(PENDING)
  payment_provider        PaymentProvider @default(IYZICO)
  payment_reference       String?
  shipping_provider       String?
  tracking_code           String?
  created_at              DateTime        @default(now())
  updated_at              DateTime        @updatedAt
  payment_transaction_ids String?
  refund_status           RefundStatus?
  items                   OrderItem[]
  user                    User?           @relation(fields: [user_id], references: [id])

  @@map("orders")
}

model OrderItem {
  id                  String  @id @default(uuid())
  order_id            String
  product_id          String
  title_snapshot      String
  unit_price_snapshot Int
  quantity            Int
  line_total          Int
  image_url           String?
  order               Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product             Product @relation(fields: [product_id], references: [id])

  @@map("order_items")
}

model Webhook {
  id         String   @id @default(uuid())
  provider   String
  event_type String
  payload    Json
  processed  Boolean  @default(false)
  created_at DateTime @default(now())

  @@map("webhooks")
}

// Kategoriler
model Category {
  id            String         @id @default(uuid())
  name          String
  slug          String         @unique
  description   String?
  image         String?
  status        CategoryStatus @default(ACTIVE)
  sort_order    Int            @default(0)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  products      Product[]
  subcategories SubCategory[]

  @@map("categories")
}

// Alt Kategoriler
model SubCategory {
  id          String         @id @default(uuid())
  name        String
  slug        String         @unique
  description String?
  image       String?
  status      CategoryStatus @default(ACTIVE)
  sort_order  Int            @default(0)
  category_id String
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  products    Product[]
  category    Category       @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@map("subcategories")
}

// Kargo Ayarları (Tekil kayıt)
model ShippingSettings {
  id                      String  @id @default(uuid())
  base_shipping_fee       Int     @default(2500) // 25 TL kuruş cinsinden
  free_shipping_threshold Int     @default(100000) // 1000 TL kuruş cinsinden
  active                  Boolean @default(true)
  updated_at              DateTime @updatedAt

  @@map("shipping_settings")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum CouponType {
  PERCENTAGE
  FIXED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  FAILED
}

enum PaymentProvider {
  IYZICO
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

enum RefundStatus {
  NOT_APPLICABLE
  AUTOMATIC_SUCCESS
  MANUAL_REQUIRED
  MANUAL_COMPLETED
}

enum CategoryStatus {
  ACTIVE
  INACTIVE
}

model PaymentMethod {
  id           String          @id @default(uuid())
  title        String
  description  String
  type         PaymentProvider @default(IYZICO)
  payment_info Json?
  active       Boolean         @default(true)
  created_at   DateTime        @default(now())
  updated_at   DateTime        @updatedAt

  @@map("payment_methods")
}
